name: Extension build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:
  
jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        VsTargetVersion: ['VS2019', 'VS2022']
    env: 
        Configuration: Release
        SolutionPath: src\Unitverse.sln
        VsixPath: src\Unitverse\bin\${{ matrix.VsTargetVersion }}\Release\Unitverse${{ matrix.VsTargetVersion }}.vsix
        VsTargetVersion: '${{ matrix.VsTargetVersion }}'
    steps:
    - uses: actions/checkout@v2   
      with:
        fetch-depth: '0'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - run: |
        ./.github/workflows/AutoVersion.ps1
      shell: pwsh 
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Restore NuGet Packages
      run: nuget restore $env:SolutionPath -Verbosity quiet
    - name: Set version for Visual Studio Extension
      uses: cezarypiatek/VsixVersionAction@1.0
      with:
        version: '${{env.AutoVersion_AssemblySemVer}}'
        vsix-manifest-file: 'src\Unitverse\Manifests\${{ matrix.VsTargetVersion }}\source.extension.vsixmanifest'
    - name: Build extension
      run: msbuild $env:SolutionPath /t:Rebuild -v:m
      env: 
        DeployExtension: False
    - run: |
        ./.github/workflows/CheckChanges.ps1
      shell: pwsh 
    - name: Test extension
      run: dotnet test --no-build --verbosity minimal $env:SolutionPath
    - name: Collect artifacts - VSIX
      uses: actions/upload-artifact@v2
      with:
        name: Unitverse-VSIX-${{ matrix.VsTargetVersion }}
        path: ${{ env.VsixPath }}
        
  release-extension:
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    needs: build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2   
      with:
        fetch-depth: '0'
    - run: |
        ./.github/workflows/AutoVersion.ps1
      shell: pwsh 
    - uses: actions/download-artifact@master
      with:
        name: Unitverse-VSIX-VS2019
        path: dist/
    - uses: actions/download-artifact@master
      with:
        name: Unitverse-VSIX-VS2022
        path: dist/
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{env.AutoVersion_SemVer}}
        release_name: ${{env.AutoVersion_SemVer}}
        body: 'Unitverse v${{env.AutoVersion_SemVer}}'
        draft: false
        prerelease: false
    - name: Upload Unitverse for Visual Studio 2019 to release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: 'dist/UnitverseVS2019.vsix'
        asset_name: 'Unitverse.VS2019.vsix'
        asset_content_type: binary/octet-stream
    - name: Upload Unitverse for Visual Studio 2019 to release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: 'dist/UnitverseVS2022.vsix'
        asset_name: 'Unitverse.VS2022.vsix'
        asset_content_type: binary/octet-stream
    - name: Publish 2022 extension to Marketplace
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      uses: cezarypiatek/VsixPublisherAction@0.1
      with:
        extension-file: 'dist/UnitverseVS2022.vsix'
        publish-manifest-file: 'publishManifestVS2022.json'
        personal-access-code: ${{ secrets.UNITVERSE_PUBLISHER_ACCESS_TOKEN }}      
    - name: Publish 2019 extension to Marketplace
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      uses: cezarypiatek/VsixPublisherAction@0.1
      with:
        extension-file: 'dist/UnitverseVS2019.vsix'
        publish-manifest-file: 'publishManifestVS2019.json'
        personal-access-code: ${{ secrets.UNITVERSE_PUBLISHER_ACCESS_TOKEN }}      
