// ! Multiple Overloads
// $ Shows how unitverse generates unambiguous names for methods that test multiple overloads of the same source method

namespace Unitverse.Examples
{
    using System;
    using System.Collections.Generic;
    using System.Linq;  
    
    public enum Stage
    {
        First,
		Second,
		Third,
		Fourth,
    }

    public static class FluentFactory
    {
        public static Tuple<Stage, IList<Stage>> Follows(this Stage stage, params Stage[] followedStages)
        {
		    return null;
        }

        public static IDictionary<Stage, IList<Stage>> And(this Tuple<Stage, IList<Stage>> firstConstraint, Tuple<Stage, IList<Stage>> secondConstraint)
        {
		    return null;
        }

        public static IDictionary<Stage, IList<Stage>> And(this IDictionary<Stage, IList<Stage>> constraints, Tuple<Stage, IList<Stage>> additionalConstraint)
        {
		    return null;
        }
    }
}