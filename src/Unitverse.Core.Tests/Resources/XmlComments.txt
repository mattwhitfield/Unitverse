// # EmitXmlDocumentation=true
namespace Unitverse.Web.Services.Flow
{
	using System;
    using System.Collections.Generic;
    using System.Linq;	
    using System.Threading.Tasks;
	
	public enum FlowStage
    {
        First = 0,
        Second = 1,
        Third = 2
    }

	public static class FlowConstraintProviderFactory
    {
        public static Tuple<FlowStage, IList<FlowStage>> Follows(this FlowStage stage, TimeSpan span, params FlowStage[] followedStages)
        {
            return null;
        }

        public static async Task<IDictionary<FlowStage, IList<FlowStage>>> And(this Tuple<FlowStage, IList<FlowStage>> firstConstraint, Tuple<FlowStage, IList<FlowStage>> secondConstraint)
        {
            return null;
        }

        public static IDictionary<FlowStage, IList<FlowStage>> And(this IDictionary<FlowStage, IList<FlowStage>> constraints, string additionalConstraint)
        {
            return null;
        }

        public static FlowConstraintProvider ToConstraintProvider(this Tuple<FlowStage, IList<FlowStage>> constraint)
        {
            return null;
        }

        public static FlowConstraintProvider ToConstraintProvider(this IDictionary<FlowStage, IList<FlowStage>> constraints)
        {
            return null;
        }
    }

	public class FlowConstraintProvider
    {
        public FlowConstraintProvider(IDictionary<FlowStage, IList<FlowStage>> constraints)
        {
        }

        public IEnumerable<FlowStage> GetPredecessors(FlowStage stage)
        {
            return null;
        }
    }
}